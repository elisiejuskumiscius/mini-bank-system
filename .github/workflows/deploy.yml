name: Build, Push to ECR, and Deploy to EC2

on:
  workflow_run:
    workflows: [ "Terraform AWS Deploy" ]
    types:
      - completed

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::390844768930:role/ecr-role
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Build Docker images with Docker Compose
        run: docker compose build

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag Docker image
        run: |
          docker tag myapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-repo:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-repo:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform apply -auto-approve

      - name: Get EC2 public IP
        id: get_ip
        working-directory: terraform
        run: |
          echo "ip=$(terraform output -raw app_public_ip)" >> $GITHUB_OUTPUT

      - name: Wait for 1 minute
        run: sleep 60

      - name: Copy docker-compose.yml to EC2
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          scp -i ec2_key.pem -o StrictHostKeyChecking=no docker-compose.deploy.yaml ubuntu@${{ steps.get_ip.outputs.ip }}:/home/ubuntu/docker-compose.yaml 

      - name: SSH into EC2 and install docker
        run: |
          ssh -T -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ steps.get_ip.outputs.ip }} << 'EOF'
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
  
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          echo "Current directory: $(pwd)"
          cd /home/ubuntu
          echo "Current directory: $(pwd)"

      - name: Deploy
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          echo "Current directory: $(pwd)"
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-repo:latest
          docker compose down
          docker compose up -d
          EOF

      - name: Remove key
        if: always()
        run: rm -f ec2_key.pem
